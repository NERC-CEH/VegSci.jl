---
title: "Fidelity Measures"
format: 
  commonmark:
    variant: -raw_html+tex_math_dollars
    wrap: none
execute: 
  freeze: auto
  eval: true
  echo: true
  output: true
julia: julia-1.10
bibliography: ../../../references.bib
---

```{julia activate_environment}
#| include: false
using Pkg; Pkg.activate("docs")
```

```{julia load_packages}
using VegSci
using Clustering
using CSV
using DataFrames
using NamedArrays
```

## Outline

This methods page provides an overview of the step-by-step implementation of the fidelity metrics following @chytry2002.

The functionality outlined here aims to replicate the functionality found in the program JUICE @tichy2002.

## Load example data.

Load the `dune` dataset bundled with the R package `vegan`.

```{julia load_dune_julia}
begin
	# dune_df = CSV.read("../data/dune.csv", DataFrame, header = 1)
  dune_df = CSV.read("docs/src/data/dune.csv", DataFrame, header = 1)
	dune_na = NamedArray(Array(dune_df))
	NamedArrays.setnames!(dune_na, names(dune_df), 2)
  dune_na = float.(dune_na)
end
```

## Identify Clusters

Let's identify some clusters, storing the cluster-releve memberships as a dictionary.

```{julia fuzzy_c_clusters}
r = Clustering.fuzzy_cmeans(transpose(dune_na), 3, 2)

cluster_weights = r.weights
clusters_vec = vec(Tuple.(findmax(cluster_weights, dims = 2)[2]))
clusters_mat = hcat(first.(clusters_vec), last.(clusters_vec))

clusters = Dict

for i in unique(clusters_mat[:,2])

    rowids = clusters_mat[clusters_mat[:,2] .== i, :][:,1]
    clusters_i = Dict(string(i) => string.(rowids))
    clusters = merge(clusters, clusters_i)
    
end

clusters
```

Create a presence-absence matrix by replacing all non-zero values with an Integer value of 1.

```{julia create_sample_data}
dune_pa = Int.(dune_na .!= 0)
```

## Calculate fidelity metrics

Using cluster 1 as an example, $p = 1$.

### Observed Frequencies

First, calculate the observed frequencies $f(o)_{i}$.

**$N$**

Calculate $N$ the number of releves in the matrix.

```{julia N}
N = size(dune_pa)[1]
```

**$N_{p}$**

Calculate $N_{p}$ the number of releves in the particular vegetation unit.

```{julia Np}
Np = length(getindex(clusters, 1))
```

**$n$**

Calculate $n$ the number of occurrences of the species in the matrix.

```{julia n}
n = sum(dune_pa, dims = 1)
setnames!(n, ["all"], 1)
n
```

**$f(o)_{1}$**

Calculate $f(o)_{1}$ or $n_{p}$, the number of occurences of the species in the particular vegetation unit.

```{julia fo_1}
np = sum(dune_pa[getindex(clusters, 1),:], dims = 1)
fo_1 = np
```

**$f(o)_{2}$**

Calculate $n - n_{p}$ the number of releves containing the species that aren't in a particular vegetation unit.

```{julia fo_2}
fo_2 = n - np
```

**$f(o)_{3}$**

Calculate $N_{p} - n_{p}$ the number of releves which don't contain the species in a particular vegetation unit.

```{julia fo_3}
fo_3 = Np .- np
```

**$f(o)_{4}$**

Calculate $N - N_{p} - n + n_{p}$ the number of releves not containing the species and not in the vegetation unit

```{julia fo_4}
fo_4 = N - Np .- n .+ np
```

### Expected Frequencies

Then calculate the expected frequencies $f(e)_{i}$

**$f(e)_{1}**

Calculate the expected number of the releves containing the species in the particular vegetation unit $n \cdot N_{p}/N$.

```{julia fe_1}
fe_1 = n .* (Np / N)
```

**$f(e)_{2}**

Cal

```{julia fe_2}
fe_2 = n .* ((N - Np) / N)
```

**$f(e)_{3}**

```{julia fe_3}
fe_3 = (N .- n) .* (Np ./ N)
```

**$f(e)_{4}**

```{julia fe_4}
fe_4 = (N .- n) .* ((N - Np) / N)
```


### Dufrêne-Legendre Indicator Value Index

```{julia indval}
indval = ((np .* (N - Np)) ./ (((n .* Np) .- (2 .* np)) .+ (np .* N))) .* (np ./ Np)
```

## Compose functions

Here we create two functions, the first which doesn't use observed and expected frequencies - the Dufrêne-Legendre Indicator Value Index function.

```{julia indval_function}
function indval_fidelity(x::NamedMatrix, clusters::Dict{String, Vector{String}})

    N = size(x)[1]
    n = sum(x, dims = 1)

    indval_all = NamedArrays.NamedArray(zeros(length(names(clusters)), size(x)[2]), names = (names(clusters), names(x)[2]))
    
    for i in names(clusters)
        Np = length(getindex(clusters, i))
        np = sum(x[getindex(clusters, i),:], dims = 1)
        indval = ((np .* (N - Np)) ./ (((n .* Np) .- (2 .* np)) .+ (np .* N))) .* (np ./ Np)
        indval_all[i,:] = indval
    end

    return indval_all

end
```

Test the `indval_fidelity` function.

```{julia test_indval_function}
indval_fidelity(dune_pa, clusters)
```
