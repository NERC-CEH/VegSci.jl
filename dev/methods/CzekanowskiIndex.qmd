---
title: "Czekanowski Index"
execute: 
  enabled: true
julia: julia-1.10
bibliography: ../references.bib
---

## Outline

This page demonstrates the use of the Czekanowski index in calculating community similarities between sets of site by species matrices.

## Import Required Packages

```{julia import_packages_julia}
using NamedArrays
using LinearAlgebra
using CSV
using BenchmarkTools
using DataFrames
```

## Czekanowski index

The Czekanowski index, also known as the proportional similarity index, Bray-Curtis similarity, Steinhaus similarity, Pielou's similarity, Sorensen's quantitative similarity is a well-known and commonly used measure of community similarity.
@eq-czekanowski_index outlines two formulations of the Czekanowski index, where $N_{ij}$ is the abundance of species $i$ at site $j$, $N_{ik}$ is the abundance of species $i$ at site $k$, $p$ is the total number of species in the samples, $W$ is the sum of the minimum abundances of each species $i$, $A$ is the sum of abundances of all species at site $j$ ($\sum_{i=1}^{p} N_{ij}$), and $B$ is the sum of abundances of all species at site $k$ ($\sum_{i=1}^{p} N_{ik}$). This index is often also expressed in percentage terms [@gauch1982], and or as a dissimilarity.


```math
C_{jk} = 2 \cdot \frac{\sum_{i=1}^{p} min(N_{ij}, N_{ik})}{\sum_{i=1}^{p} N_{ij} + \sum_{i=1}^{p} N_{ik}} = 2 \cdot \frac{W}{A + B}
```

## Create example data

Create example data in the form of a site by species named matrix using the generate_test_array function defined in [Data Wrangling](DataWrangling.qmd#sec-align_array_columns).

```{julia create_example_data}
#| code-fold: true
begin
	rows = 5
	cols = 11
	rownames = vec(["Releve"].*string.([1:1:rows;]))
	colnames = vec(["Spp"].*string.([1:1:cols;]))
	mat = NamedArray(rand(0:5, rows, cols), names = (rownames, colnames), dimnames = ("Releve", "Species"))
end
```

## Calculate A and B

```{julia rowsums_AB}
rowsums = sum(mat, dims = 2)
A = rowsums[1,1]
B = rowsums[2,1]
```

## Calculate W

```{julia min_W}
W = sum(minimum(mat, dims = 1), dims = 2)[1,1]
```

## Calculate Czekanowski index

```{julia czek_sim}
czek_sim = 2 * W / (A + B)
```

## Create function

Create a function to return the Czekanowski index for two sites contained in a single matrix.

```{julia czekanowski_index_once_function}
function czekanowski_index_once(mat::NamedArray)

    rowsums = sum(mat, dims = 2)
    A = rowsums[1,1]
    B = rowsums[2,1]
    W = sum(minimum(mat, dims = 1), dims = 2)[1,1]
    sim = 2 * W / (A + B)
    
    return sim
end
```

Whilst useful, what is most commonly required is a set of pairwise similarities from two sets of matrices, often a set of references and a set of samples.

Let's create some new example data, note that the sample plots data is missing two species: "Spp3" and "Spp11" and the reference plots data is missing one species, "Spp4".

```{julia create_example_data_samples}
#| code-fold: true
begin
    rows = 500
    cols = 1100
	rownames = vec(["SampReleve"].*string.([1:1:rows;]))
    colnames = vec(["Spp"].*string.([1:1:cols;]))
	samp_mat = NamedArray(rand(0:5, rows, cols), names = (rownames, colnames), dimnames = ("Releve", "Species"))[:,Not(["Spp3", "Spp11"])]
end
```

```{julia create_example_data_references}
#| code-fold: true
begin
    rows = 500
    cols = 1100
	rownames = vec(["RefReleve"].*string.([1:1:rows;]))
    colnames = vec(["Spp"].*string.([1:1:cols;]))
	ref_mat = NamedArray(rand(0:5, rows, cols), names = (rownames, colnames), dimnames = ("Releve", "Species"))[:,Not(["Spp4"])]
end
```

We need to iterate through every combination of rows between the two matrices, but not within the matrices. Let's define a function which takes two matrices and returns a matrix containing the Czekanowski index for every row combination.

First we need to ensure the array columns are aligned. We do this using the helper function `align_array_columns` defined in [Data Wrangling](DataWrangling.qmd#sec-align_array_columns).

```{julia align_column_names}
mats_aligned = align_array_columns(samp_mat, ref_mat)
samp_mat_prepped = mats_aligned.x
ref_mat_prepped = mats_aligned.y
```

```{julia czekanowski_index_function}
function czekanowski_index(samp_mat::NamedArray, ref_mat::NamedArray)

    # Create a vector of pairwise samples and references to iterate over
    comp_vec = vec(collect(Iterators.product(names(samp_mat)[1], names(ref_mat)[1])))

    # Create an empty matrix to store results
    results = NamedArray([0.0 for i ∈ 1:size(samp_mat, 1), j ∈ 1:size(ref_mat, 1)], names = (names(samp_mat)[1], names(ref_mat)[1]))

    # Loop through each pair of samples and references, calculate the Czekanowski index, and store the results in the matrix
    for i in comp_vec
        samp_mat_i = samp_mat[[i[1]],:]
        ref_mat_i = ref_mat[[i[2]],:]
        eval_mat = vcat(samp_mat_i, ref_mat_i)
        A = sum(samp_mat_i, dims = 2)[1]
        B = sum(ref_mat_i, dims = 2)[1]
        W = sum(minimum(eval_mat, dims = 1), dims = 2)[1,1]
        sim = 2 * W / (A + B)
        results[i[1], i[2]] = sim 
    end

    return results

end

```

```{julia run_czekanowski_index}
results = czekanowski_index(samp_mat, ref_mat)
```

```{julia benchmark_czekanowski_index}
@benchmark czekanowski_index(samp_mat_prepped, ref_mat_prepped)
```

## References
