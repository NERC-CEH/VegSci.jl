---
title: "Data Wrangling"
execute: 
  enabled: true
julia: julia-1.10.2
bibliography: ../references.bib
---

## Outline

This page outlines a variety of utility functions for helping wrangle data into the desired format...


## Import Required Packages

```{julia import_packages_julia}
using Pkg; Pkg.activate("docs")
using VegSci
using NamedArrays
using BenchmarkTools
using SparseArrays
using DataFrames
using Random
```

## Generate test arrays {#sec-generate_test_arrays}

```{julia generate_test_array_parameters}
rown = 10
coln = 30
meancoloccs = 10
rowprefix = "Releve"
colprefix = "Species"
rowdim = "Releve"
coldim = "Species"
```

```{julia generate_test_array_process}
zerop = meancoloccs / coln
rownames = vec([string("$rowprefix")].*string.([1:1:rown;]))
colnames = vec([string("$colprefix")].*string.([1:1:coln;]))
# x = NamedArrays.NamedArray(rand(min:increment:max, rown, coln), names = (rownames, colnames), dimnames = (rowdim, coldim))
x = NamedArrays.NamedArray(Array(sprand(Float64, rown, coln, zerop)), names = (rownames, colnames), dimnames = (rowdim, coldim))
# x = NamedArrays.NamedArray(Array(sprand(rown, coln, zerop, randn)), names = (rownames, colnames), dimnames = (rowdim, coldim))
# x = NamedArrays.NamedArray(Array(sprand(rown , coln, zerop, randexp)), names = (rownames, colnames), dimnames = (rowdim, coldim))
y = x ./ sum(x, dims = 2)

sum(x, dims = 2)
sum(y, dims = 2)
mean(count(i->i>0, x, dims = 2))
```

```{julia generate_test_array_function}
function generate_test_array(;rown::Int64, coln::Int64,
                             meancoloccs::Int64,
                             rowprefix::String = "Releve", colprefix::String = "Species",
                             rowdim::String = "Releve", coldim::String = "Species")

                             
    zerop = meancoloccs / coln
    rownames = vec([string("$rowprefix")].*string.([1:1:rown;]))
    colnames = vec([string("$colprefix")].*string.([1:1:coln;]))
    x = NamedArrays.NamedArray(Array(sprand(Float64, rown, coln, zerop)), names = (rownames, colnames), dimnames = (rowdim, coldim))
    y = x ./ sum(x, dims = 2)
    return y

end
```

```{julia generate_test_array_test}
generate_test_array(rown = 10, coln = 10, meancoloccs = 6)
```

## Aligning releve by species matrices {#sec-align_array_columns}

Many analyses in vegetation science require releve by species matrices. Frequently, such matrices contain different sets of species in the columns. Combining matrices, often `NamedArrays.NamedArray` objects in Julia, or ensuring these matrices have the same sets of species in the columns is a non-trivial task in Julia given the lack of a function to merge matrices in `NamedArrays`. Using R and in contrast, given two matrices (x and y) the R function `base::merge(x, y, by = "row.names", all = TRUE)` achieves this.

Below is a helper function to align the columns in two `NamedArrays.NamedArray` objects.

### Establish example data

```{julia create_example_data_samples}
w = generate_test_array(rown = 20, coln = 30, meancoloccs = 10, rowprefix = "SiteA-", colprefix = "Species")[:,Not(["Species7", "Species20"])]
x = generate_test_array(rown = 20, coln = 30, meancoloccs = 10, rowprefix = "SiteB-", colprefix = "Species")[:,Not(["Species3", "Species11"])]
y = generate_test_array(rown = 20, coln = 30, meancoloccs = 10, rowprefix = "SiteC-", colprefix = "Species")[:,Not(["Species15"])]
z = generate_test_array(rown = 20, coln = 30, meancoloccs = 10, rowprefix = "SiteD-", colprefix = "Species")[:,Not(["Species28"])]
mats = [w,x,y,z] # Or tuple?
```

Check whether the column names are aligned.

```{julia check_columns}
names(w)[2] == names(x)[2]
names(w)[2] == names(y)[2]
names(w)[2] == names(z)[2]
names(x)[2] == names(y)[2]
names(x)[2] == names(z)[2]
names(y)[2] == names(z)[2]
```


```{julia df_function}
function merge_namedarrays(mats::Vector)

    # Check if any rownames are equal, stop if so

    # Check if all dimnames are equal, stop if not

    # Get dinames

    # Create data frame to hold results
    df_all = DataFrame()
    for mat in mats

        rowdimname = dimnames(mat, 1)
        df = DataFrame(mat, Symbol.(names(mat)[2]))
        insertcols!(df, 1, Symbol(rowdimname) => names(mat)[1])
        df = stack(df, Not(rowdimname))

        df_all = [df_all; df]

    end

    df_all_wide = unstack(df_all, fill = 0.0)
    df_all_wide_prepped = select(df_all_wide, Not([1]))

    rownames = df_all_wide[!, 1]
    colnames = names(df_all_wide_prepped)

    results = NamedArray(Matrix(df_all_wide_prepped), names = (rownames, colnames))

    return results

end
```

```{julia df_function_test}
test = merge_namedarrays(mats)
```

```{julia df_function_benchmark}
@benchmark merge_namedarrays(mats)
```

### Define function

```{julia align_array_columns_function}
function align_array_columns(x::NamedArray, y::NamedArray, colorder::String = "x")

    # Check which columns are missing from x and y
    x_missing_cols = setdiff(Set(names(y)[2]), Set(names(x)[2]))
    y_missing_cols = setdiff(Set(names(x)[2]), Set(names(y)[2]))

    x_mat = copy(x)

    # If there are missing columns in the x matrix
    if length(x_missing_cols) != 0
        x_mat_missing = NamedArray(zeros(size(x,1), length(x_missing_cols)), names = (vec(names(x)[1]), collect(x_missing_cols)))
        x_mat_colnames = names(x)[2]
        x_mat = [x x_mat_missing]
        setnames!(x_mat, [x_mat_colnames; collect(x_missing_cols)], 2)
    end

    y_mat = copy(y)

    # If there are missing columns in the x matrix
    if length(y_missing_cols) != 0
        y_mat_missing = NamedArray(zeros(size(y,1), length(y_missing_cols)), names = (vec(names(y)[1]), collect(y_missing_cols)))
        y_mat_colnames = names(y)[2]
        y_mat = [y y_mat_missing]
        setnames!(y_mat, [y_mat_colnames; collect(y_missing_cols)], 2)
    end

    if colorder == "x"
        y_mat = y_mat[:, names(x_mat)[2]]
    elseif colorder == "y"
        x_mat = x_mat[:, names(y_mat)[2]]
    end

    aligned_mats = (x = x_mat, y = y_mat)

    return aligned_mats

end
```

### Test function

```{julia align_array_columns_test}
results = align_array_columns(x, y)
names(results.x)[2] == names(results.y)[2]
```

### Benchmark function

```{julia benchmark_align_array_columns}
@benchmark align_array_columns(x, y)
```