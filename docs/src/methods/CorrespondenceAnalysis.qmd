---
title: "Correspondence Analysis"
format: 
  commonmark:
    variant: -raw_html+tex_math_dollars
    wrap: none
execute: 
  freeze: auto
  eval: true
  echo: true
  output: true
julia: julia-1.10.2
bibliography: ../../../references.bib
---

```{julia activate_environment}
#| include: false
using Pkg; Pkg.activate("docs")
```

## Outline

This page details how to perform correspondence analysis in Julia following the computational algorithm outlined in appendix A of @greenacre2017 and implemented in the R package `ca` [@nenadic2007].

The Julia package MultivariateStats.jl does not currently contain an implementation of correspondence analysis.

## Import Required Packages

```{julia import_packages}
using VegSci
using NamedArrays
using LinearAlgebra
using CSV
using BenchmarkTools
using DataFrames
using Plots
```

## Create example data

Create example data in the form of a releve by species named matrix, N.

```{julia create_example_data}
N = VegSci.generate_test_array(rown = 20, coln = 30, meancoloccs = 10, rowprefix = "SiteA-", colprefix = "Species")
```


## A.1 Create the correspondence matrix

Calculate the correspondence matrix $P$ following.

```math
P = \frac{1}{n}N
```

```{julia proportion_matrix}
begin
  n = sum(N)
  P = N / n
end
```

## A.2 Calculate column and row masses

Calculate the row and and column masses.

```math
r = P1 \space \space
r_{i} = \sum^{J}_{j = 1} P_{ij}
```

```math
c = P^{t}1 \space \space
c_{j} = \sum^{I}_{i = 1} P_{ij}
```

```{julia row_masses}
r = vec(sum(P, dims = 2))
```

```{julia column_masses}
c = vec(sum(P, dims = 1))
```

## A.3 Diagonal matrices of row and column masses

```{julia column_masses_diagonal}
Dr = Diagonal(r)
```

```{julia row_masses_diagonal}
Dc = Diagonal(c)
```

## A.4 Calculate the matrix of standardized residuals

```math
SR = D_{r}^{-\frac{1}{2}}(P - rc^{T})D_{c}^{-\frac{1}{2}}
```

```{julia standardized_residuals}
SR = Dr^(-1/2) * (P - r * transpose(c)) * Dc^(-1/2)
```

## A.5 Calculate the Singular Value Decomposition (SVD) of S

```{julia svd}
begin
  svd = LinearAlgebra.svd(SR)
  U = svd.U
  S = svd.S
  V = svd.V
  Vt = svd.Vt
end
```

## A.6 Standard coordinates $\Phi$ of rows

```math
\Phi = D_{r}^{-\frac{1}{2}} U
```

```{julia standard_coordinates_rows}
Φ = Dr^(-1/2) * U
```

## A.7 Standard coordinates $\Gamma$ of columns

```math
\Gamma = D_{c}^{-\frac{1}{2}} V
```

```{julia standard_coordinates_columns}
Γ = Dc^(-1/2) * V
```

## A.8 Principal coordinates F of rows

```math
F = D_{r}^{-\frac{1}{2}} U D_{\alpha} = \Phi D_{\alpha}
```

```{julia principal_coordinates_rows}
F = Φ * Diagonal(S)
```

## A.9 Principal coordinates G of columns

```math
G = D_{c}^{-\frac{1}{2}} V D_{\alpha} = \Gamma D_{\alpha}
```

```{julia principal_coordinates_columns}
G = Γ * Diagonal(S)
```

## A.10 Principal inertias $\lambda_{k}$

```math
\lambda_{k} = \alpha_{k}^{2}, k = 1,2,...,\space where \space k = min\{I-1,J-1\}
```

```{julia principal_inertias_columns}
F * Dr * transpose(F)
```

```{julia principal_inertias_rows}
G * Dr * transpose(G)
```

## Create Correspondence Analysis Function

```{julia correspondence_analysis_function}
function correspondence_analysis(N::NamedMatrix)
  
  # A.1 Create the correspondence matrix
  P = N / sum(N)

  # A.2 Calculate column and row masses
  r = vec(sum(P, dims = 2))
  c = vec(sum(P, dims = 1))

  # A.3 Diagonal matrices of row and column masses
  Dr = Diagonal(r)
  Dc = Diagonal(c)

  # A.4 Calculate the matrix of standardized residuals
  SR = Dr^(-1/2) * (P - r * transpose(c)) * Dc^(-1/2)

  # A.5 Calculate the Singular Value Decomposition (SVD) of S
  svd = LinearAlgebra.svd(SR)
  U = svd.U
  V = svd.V
  S = svd.S
  D = Diagonal(S)

  # A.6 Standard coordinates Φ of rows
  Φ_rownames = names(N)[1]
  Φ_colnames = vec(["Dim"].*string.([1:1:size(D,1);]))
  Φ = NamedArray(Dr^(-1/2) * U, names = (Φ_rownames, Φ_colnames), dimnames = ("Plot", "Dimension"))[1:end,1:end .!= end]
  
  # A.7 Standard coordinates Γ of columns
  Γ_rownames = names(N)[2]
  Γ_colnames = vec(["Dim"].*string.([1:1:size(D,1);]))
  Γ = NamedArray(Dc^(-1/2) * V, names = (Γ_rownames, Γ_colnames), dimnames = ("Species", "Dimension"))[1:end,1:end .!= end]
  
  # A.8 Principal coordinates F of rows
  # F = Φ * D
  F = Dr^(-1/2) * U * D
  F = F[1:end,1:end .!= end]
  
  # A.9 Principal coordinates G of columns
  # G = Γ * D
  G = Dc^(-1/2) * V * D
  G = G[1:end,1:end .!= end]

  results = (sv = D, # Singular values
             rownames = names(N)[1], # Row names
             rowmass = r, # Row masses
             #  rowdist = , # Row chi-square distances to centroid
             #  rowinertia = , # Row inertias
             rowcoord = Φ, # Row standard coordinates
             #  rowsup = , # Indicies of row supplementary points
             colnames = names(N)[2], # Column names
             colmass = c, # Column masses
             #  coldist = , # Column chi-square distances to centroid
             #  colinertia = , # Column inertias
             colcoord = Γ, # Column standard coordinates
             #  colsup = , # Indices of column supplementary points
             N = N # The frequency table
            )

  return results

end
```

### Test Function

```{julia correspondence_analysis_function_test}
ca_results = correspondence_analysis(N)
```

### Plot Test Results

```{julia plot_correspondence_analysis_function}
begin
  plots_x = ca_results.rowcoord[:,"Dim1"]
  plots_y = ca_results.rowcoord[:,"Dim2"]

  species_x = ca_results.colcoord[:,"Dim1"]
  species_y = ca_results.colcoord[:,"Dim2"]

  Plots.scatter(species_x, species_y, series_annotations = text.(ca_results.colnames, 8, :right, :bottom), framestyle=:origin, label = "Species")
  Plots.scatter!(plots_x, plots_y, series_annotations = text.(ca_results.rownames, 8, :right, :bottom), label = "Plots")
end
```

## References