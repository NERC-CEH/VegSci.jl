---
title: "Correspondence Analysis"
format: 
  commonmark:
    variant: -raw_html+tex_math_dollars
    wrap: none
execute: 
  freeze: auto
  eval: true
  echo: true
  output: true
julia: julia-1.10
bibliography: ../../../references.bib
---

## Outline

This page details how to perform correspondence analysis in Julia following the computational algorithm outlined in appendix A of @greenacre2017 and implemented in the R package `ca` [@nenadic2007].

The Julia package MultivariateStats.jl does not currently contain an implementation of correspondence analysis.

## Import Required Packages

::: {.panel-tabset}

## Julia

```{julia import_packages}
using Pkg; Pkg.activate("docs")
using EcoVeg
using NamedArrays
using LinearAlgebra
using CSV
using BenchmarkTools
using DataFrames
# using Plots
```

## R

```{r import_packages_r}
library(ca)
library(microbenchmark)
library(ggplot2)
library(dplyr)
library(JuliaCall)
```

:::

## Create example data

Create example data in the form of a site by species named matrix, N.

```{julia create_example_data}
#| code-fold: true
N = generate_test_array(rown = 20, coln = 30, meancoloccs = 10, rowprefix = "SiteA-", colprefix = "Species")
```


## A.1 Create the correspondence matrix

Calculate the correspondence matrix $P$ following @eq-p.

```math
P = \frac{1}{n}N
```

```{julia proportion_matrix}
begin
  n = sum(N)
  P = N / n
end
```

## A.2 Calculate column and row masses

Calculate the row and and column masses using @eq-row_masses and @eq-column_masses respectively.

```math
r = P1 \space \space
r_{i} = \sum^{J}_{j = 1} P_{ij}
```

```math
c = P^{t}1 \space \space
c_{j} = \sum^{I}_{i = 1} P_{ij}
```

```{julia row_masses}
r = vec(sum(P, dims = 2))
```

```{julia column_masses}
c = vec(sum(P, dims = 1))
```

## A.3 Diagonal matrices of row and column masses

```{julia column_masses_diagonal}
Dr = Diagonal(r)
```

```{julia row_masses_diagonal}
Dc = Diagonal(c)
```

## A.4 Calculate the matrix of standardized residuals

```math
SR = D_{r}^{-\frac{1}{2}}(P - rc^{T})D_{c}^{-\frac{1}{2}}
```

```{julia standardized_residuals}
SR = Dr^(-1/2) * (P - r * transpose(c)) * Dc^(-1/2)
```

## A.5 Calculate the Singular Value Decomposition (SVD) of S

```{julia svd}
begin
  svd = LinearAlgebra.svd(SR)
  U = svd.U
  S = svd.S
  V = svd.V
  Vt = svd.Vt
end
```

## A.6 Standard coordinates $\Phi$ of rows

```math
\Phi = D_{r}^{-\frac{1}{2}} U
```

```{julia standard_coordinates_rows}
Φ = Dr^(-1/2) * U
```

```{julia phi_names}
# NamedArrays.setnames!(NamedArray(Φ), names = vec(names(N)[1]))
# NamedArray(Φ, names(N)[1])
```

## A.7 Standard coordinates $\Gamma$ of columns

```math
\Gamma = D_{c}^{-\frac{1}{2}} V
```

```{julia standard_coordinates_columns}
Γ = Dc^(-1/2) * V
```

## A.8 Principal coordinates F of rows

```math
F = D_{r}^{-\frac{1}{2}} U D_{\alpha} = \Phi D_{\alpha}
```

```{julia principal_coordinates_rows}
F = Φ * Diagonal(S)
```

## A.9 Principal coordinates G of columns

```math
G = D_{c}^{-\frac{1}{2}} V D_{\alpha} = \Gamma D_{\alpha}
```

```{julia principal_coordinates_columns}
G = Γ * Diagonal(S)
```

## A.10 Principal inertias $\lambda_{k}$

```math
\lambda_{k} = \alpha_{k}^{2}, k = 1,2,...,\space where \space k = min\{I-1,J-1\}
```

```{julia principal_inertias_columns}
F * Dr * transpose(F)
```

```{julia principal_inertias_rows}
G * Dr * transpose(G)
```

## Create Correspondence Analysis Function

```{julia correspondence_analysis_function}
function correspondence_analysis(N::NamedMatrix)
  
  # A.1 Create the correspondence matrix
  P = N / sum(N)

  # A.2 Calculate column and row masses
  r = vec(sum(P, dims = 2))
  c = vec(sum(P, dims = 1))

  # A.3 Diagonal matrices of row and column masses
  Dr = Diagonal(r)
  Dc = Diagonal(c)

  # A.4 Calculate the matrix of standardized residuals
  SR = Dr^(-1/2) * (P - r * transpose(c)) * Dc^(-1/2)

  # A.5 Calculate the Singular Value Decomposition (SVD) of S
  svd = LinearAlgebra.svd(SR)
  U = svd.U
  V = svd.V
  S = svd.S
  D = Diagonal(S)

  # A.6 Standard coordinates Φ of rows
  Φ_rownames = names(N)[1]
  Φ_colnames = vec(["Dim"].*string.([1:1:size(N,1);]))
  Φ = NamedArray(Dr^(-1/2) * U, names = (Φ_rownames, Φ_colnames), dimnames = ("Plot", "Dimension"))
  
  # A.7 Standard coordinates Γ of columns
  Γ_rownames = names(N)[2]
  Γ_colnames = vec(["Dim"].*string.([1:1:size(N,1);]))
  Γ = NamedArray(Dc^(-1/2) * V, names = (Γ_rownames, Γ_colnames), dimnames = ("Species", "Dimension"))
  
  # A.8 Principal coordinates F of rows
  # F = Φ * D
  F = Dr^(-1/2) * U * D
  
  # A.9 Principal coordinates G of columns
  # G = Γ * D
  G = Dc^(-1/2) * V * D

  # [1:end, 1:end .∉ [[20]]]

  results = (sv = D, # Singular values
             rownames = names(N)[1], # Row names
             rowmass = r, # Row masses
            #  rowdist = , # Row chi-square distances to centroid
            #  rowinertia = , # Row inertias
             rowcoord = Φ, # Row standard coordinates
            #  rowsup = , # Indicies of row supplementary points
             colnames = names(N)[2], # Column names
             colmass = c, # Column masses
            #  coldist = , # Column chi-square distances to centroid
            #  colinertia = , # Column inertias
             colcoord = Γ, # Column standard coordinates
            #  colsup = , # Indices of column supplementary points
            N = N # The frequency table
            )

  return results

end
```

### Test Function

```{julia correspondence_analysis_function_test}
ca_results = correspondence_analysis(N)
```

### Plot Test Results

```{julia plot_correspondence_analysis_function_test}
begin
  plots_x = ca_results.rowcoord[:,"Dim1"]
  plots_y = ca_results.rowcoord[:,"Dim2"]

  species_x = ca_results.colcoord[:,"Dim1"]
  species_y = ca_results.colcoord[:,"Dim2"]

  # scatter(species_x, species_y, series_annotations = text.(ca_results.colnames, 8, :right, :bottom), framestyle=:origin, label = "Species")
  # scatter!(plots_x, plots_y, series_annotations = text.(ca_results.rownames, 8, :right, :bottom), label = "Plots")
end
```

## R vs Julia Dune Data

Let's see how the R function `ca::ca()` compares to the Julia function `correspondence_analysis()` defined above.

First load the `dune` dataset bundled in `{vegan}`.


::: {.panel-tabset}

## Julia

```{julia load_dune_julia}
begin
	dune_df = CSV.read("../data/dune.csv", DataFrame, header = 1)
	dune_na = NamedArray(Array(dune_df))
	NamedArrays.setnames!(dune_na, names(dune_df), 2)
end
```

## R

```{r load_dune_r}
dune <- as.matrix(read.csv(file = "../data/dune.csv"))
```

:::

### Run CA in Julia on Dune data

```{julia dune_ca_julia}
dune_ca_julia = correspondence_analysis(dune_na)
```

### Run CA in R using Dune data

```{r dune_ca_r}
dune_ca_r <- ca::ca(dune)
```

```{r dune_ca_r_results}
dune_ca_coords_r <- ca::cacoord(dune_ca_r)
dune_ca_r_rowcoord <- dune_ca_coords_r$rows
dune_ca_r_colcoord <- dune_ca_coords_r$columns
```

### Check equality of R and Julia CA results

Check whether the standard row (plot) and column (species) coordinates produced by the Julia function `correspondence_analaysis()` the R function `ca::ca()` are identical.

First retrieve the Julia results in R.

```{r dune_julia_vs_r}
dune_ca_julia <- JuliaCall::julia_eval("dune_ca_julia")
dune_ca_julia_rowcoord <- dune_ca_julia$rowcoord
dune_ca_julia_colcoord <- dune_ca_julia$colcoord
```

Then check for equivalence.
Note that there are two differences in R and Julia data structure:

1.  Row and column names are stripped from the Julia results when calling `JuliaCall::julia_eval("dune_ca_julia")`, so the R results are also unnamed.
2.  The Julia results contain an additional dimension, populated with 1.0 values.

These differences are corrected below whilst checking for equivalence.

The R function `all.equal` is used rather than `identical` as the Julia implementation returns results with higher precision.

```{r all.equal}
plots_allequal <- all.equal(dune_ca_julia_rowcoord[,-20], unname(dune_ca_r_rowcoord))
species_allequal <- all.equal(dune_ca_julia_colcoord[,-20], unname(dune_ca_r_colcoord))
isTRUE(all(plots_allequal, species_allequal))
```

Let's view the first two dimensions of the Julia and R results side-by-side.

```{r prepare_data}
#| echo: false
r_species <- dune_ca_r_rowcoord[, c("Dim1", "Dim2")] |>
  as.data.frame()
r_species["Language"] <- "R"
r_species["Group"] <- "Species"

julia_species <- dune_ca_julia_rowcoord[, 1:2] |>
  as.data.frame()
names(julia_species) <- c("Dim1", "Dim2")
julia_species["Language"] <- "Julia"
julia_species["Group"] <- "Species"

both_species <- rbind(r_species, julia_species)

r_plots <- dune_ca_r_colcoord[, c("Dim1", "Dim2")] |>
  as.data.frame()
r_plots["Language"] <- "R"
r_plots["Group"] <- "Plots"

julia_plots <- dune_ca_julia_colcoord[, 1:2] |>
  as.data.frame()
names(julia_plots) <- c("Dim1", "Dim2")
julia_plots["Language"] <- "Julia"
julia_plots["Group"] <- "Plots"

both_plots <- rbind(r_plots, julia_plots)

```

### Visualise standard coordinates

```{r plot_dune_julia_vs_r}
#| echo: false
ggplot2::ggplot() +
  ggplot2::geom_point(data = both_species, mapping = ggplot2::aes(x = Dim1, y = Dim2, color = "Species")) +
  ggplot2::geom_point(data = both_plots, mapping = ggplot2::aes(x = Dim1, y = Dim2, color = "Plots")) +
  ggplot2::facet_wrap(vars(Language)) +
  ggplot2::theme_minimal() +
  NULL
```

### Benchmark Functions

```{julia benchmark_julia}
@benchmark correspondence_analysis(dune_na)
```

```{r benchmark_r}
microbenchmark::microbenchmark(ca::ca(dune))
```


## References

